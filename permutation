class Solution {
  public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        backtrack(nums, 0, result);
        return result;
    }
    
  private:
    void backtrack(vector<int>& nums, int start, vector<vector<int>>& result) {
        // Base case: if start index is at the end of the array, we found a permutation
        if (start == nums.size()) {
            result.push_back(nums);
            return;
        }
        
        // Iterate through the array and swap elements to generate permutations
        for (int i = start; i < nums.size(); i++) {
            swap(nums[start], nums[i]);          // Swap the current element with start
            backtrack(nums, start + 1, result);  // Recurse with the next index
            swap(nums[start], nums[i]);          // Undo the swap (backtrack)
        }
    }
};
